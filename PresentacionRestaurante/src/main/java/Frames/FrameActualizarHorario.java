/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frames;

import DTO.MesaDTO;
import DTO.ReservaDTO;
import DTO.RestauranteDTO;
import Excepcion.NegocioException;
import InterfacesNegocio.IMesaNegocio;
import InterfacesNegocio.IRestauranteNegocio;
import Negocio.MesaNegocio;
import Negocio.RestauranteNegocio;
import com.github.lgooddatepicker.components.DateTimePicker;
import com.github.lgooddatepicker.components.TimePicker;
import java.awt.Color;
import java.sql.Time;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.border.LineBorder;

/**
 *
 * @author santi
 */
public class FrameActualizarHorario extends javax.swing.JFrame {

    FrameModuloMesas frmModulo;
    IRestauranteNegocio restauranteNegocio = new RestauranteNegocio();
    RestauranteDTO restaurante;
        
    TimePicker pickerHoraDesde = new TimePicker(); 
    TimePicker pickerHoraHasta = new TimePicker(); 
    
    /**
     * Creates new form FramePrincipal
     */
    public FrameActualizarHorario(FrameModuloMesas frmModulo) {

        this.frmModulo = frmModulo;
        
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        initComponents();

        
        try {
            this.restaurante = restauranteNegocio.buscarRestaurante();
        } catch (NegocioException ex) {
            JOptionPane.showMessageDialog(this, "Error al buscar el restaurante " + ex);
        }

        
        panelHoraDesde.add(pickerHoraDesde);
        panelHoraHasta.add(pickerHoraHasta);
        
        inicializarComponentes();
        
    }
    
    public void inicializarComponentes(){
    
        llenarPanelDesdeYHasta();

    }
    
    public void llenarPanelDesdeYHasta(){
    
        LocalTime horaDesde = restaurante.getHoraApertura().toLocalTime();
        LocalTime horaHasta = restaurante.getHoraCierre().toLocalTime();
        
        pickerHoraDesde.setTime(horaDesde);
        pickerHoraHasta.setTime(horaHasta);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPrincipal = new javax.swing.JPanel();
        lblLogo = new javax.swing.JLabel();
        lblHeader = new javax.swing.JLabel();
        lblCerrar = new javax.swing.JLabel();
        lblAtras = new javax.swing.JLabel();
        panelHoraDesde = new javax.swing.JPanel();
        lblFechaHora = new javax.swing.JLabel();
        lblActualizarHorarios = new javax.swing.JLabel();
        panelHoraHasta = new javax.swing.JPanel();
        lblFechaHora1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelPrincipal.setBackground(new java.awt.Color(51, 36, 12));

        lblLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo.png"))); // NOI18N

        lblHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeader.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Actualizar horario.png"))); // NOI18N

        lblCerrar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/X.png"))); // NOI18N
        lblCerrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblCerrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCerrarMouseClicked(evt);
            }
        });

        lblAtras.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAtras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/(-.png"))); // NOI18N
        lblAtras.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblAtras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAtrasMouseClicked(evt);
            }
        });

        panelHoraDesde.setBackground(new java.awt.Color(241, 228, 153));
        panelHoraDesde.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(221, 188, 0)));

        lblFechaHora.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFechaHora.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Desde.png"))); // NOI18N

        lblActualizarHorarios.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblActualizarHorarios.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Actualizar horarios.png"))); // NOI18N
        lblActualizarHorarios.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblActualizarHorarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblActualizarHorariosMouseClicked(evt);
            }
        });

        panelHoraHasta.setBackground(new java.awt.Color(241, 228, 153));
        panelHoraHasta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(221, 188, 0)));

        lblFechaHora1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFechaHora1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Hasta.png"))); // NOI18N

        javax.swing.GroupLayout panelPrincipalLayout = new javax.swing.GroupLayout(panelPrincipal);
        panelPrincipal.setLayout(panelPrincipalLayout);
        panelPrincipalLayout.setHorizontalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblLogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblHeader, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
            .addGroup(panelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAtras)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblCerrar)
                .addContainerGap())
            .addGroup(panelPrincipalLayout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelHoraDesde, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFechaHora))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelHoraHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFechaHora1))
                .addGap(51, 51, 51))
            .addComponent(lblActualizarHorarios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelPrincipalLayout.setVerticalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCerrar)
                    .addComponent(lblAtras))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                        .addComponent(lblHeader)
                        .addGap(18, 18, 18)
                        .addComponent(lblLogo)
                        .addGap(46, 46, 46)
                        .addComponent(lblFechaHora)
                        .addGap(18, 18, 18)
                        .addComponent(panelHoraDesde, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                        .addComponent(lblFechaHora1)
                        .addGap(18, 18, 18)
                        .addComponent(panelHoraHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 312, Short.MAX_VALUE)
                .addComponent(lblActualizarHorarios)
                .addGap(70, 70, 70))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblCerrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCerrarMouseClicked
        // TODO add your handling code here:
        this.dispose();
        
    }//GEN-LAST:event_lblCerrarMouseClicked

    private void lblAtrasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAtrasMouseClicked
        // TODO add your handling code here:
        frmModulo.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_lblAtrasMouseClicked

    public boolean pasaValidaciones(){
        
        Time horaAperturaSeleccionada = Time.valueOf(pickerHoraDesde.getTime());
        Time horaCierreSeleccionada = Time.valueOf(pickerHoraHasta.getTime());
        

        if(horaAperturaSeleccionada == null){
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una hora de apertura");
            return false;
        }

        if(horaCierreSeleccionada == null){
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una hora de Cierre");
            return false;
        }
        
        if(horaAperturaSeleccionada.after(horaCierreSeleccionada) || horaCierreSeleccionada.before(horaAperturaSeleccionada)){
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una hora congruente");
            return false;
        }
        
        if(horaAperturaSeleccionada.equals(restaurante.getHoraApertura()) && horaCierreSeleccionada.equals(restaurante.getHoraCierre())){
            JOptionPane.showMessageDialog(this, "Por favor, cambie los datos antes de actualizar");
            return false;
        }
            

        return true;
                    
    }
    
    private void lblActualizarHorariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblActualizarHorariosMouseClicked
        // TODO add your handling code here:
        
        if(!pasaValidaciones())
            return;
        
        System.out.println(restaurante.toString());
        
        LocalTime horaAperturaSeleccionada = pickerHoraDesde.getTime();
        LocalTime horaCierreSeleccionada = pickerHoraHasta.getTime();

        restaurante.setHoraApertura(Time.valueOf(horaAperturaSeleccionada));
        restaurante.setHoraCierre(Time.valueOf(horaCierreSeleccionada));
        
        try {
            restauranteNegocio.actualizarRestaurante(restaurante);
        } catch (NegocioException ex) {
            JOptionPane.showMessageDialog(this, "Error al actualizar la hora. " + ex);
            return;
        }
        
        JOptionPane.showMessageDialog(this, "Horario actualizado correctamente");
        
    }//GEN-LAST:event_lblActualizarHorariosMouseClicked



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblActualizarHorarios;
    private javax.swing.JLabel lblAtras;
    private javax.swing.JLabel lblCerrar;
    private javax.swing.JLabel lblFechaHora;
    private javax.swing.JLabel lblFechaHora1;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JPanel panelHoraDesde;
    private javax.swing.JPanel panelHoraHasta;
    private javax.swing.JPanel panelPrincipal;
    // End of variables declaration//GEN-END:variables
}
